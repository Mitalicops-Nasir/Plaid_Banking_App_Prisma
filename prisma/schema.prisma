generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  email                 String?                @unique
  firstName             String?
  lastName              String?
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[] // MongoDB supports arrays for related data
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  dwollaCustomerUrl     String?
  dwollaCustomerId      String?
  address1              String?
  city                  String?
  postalCode            String?
  dateOfBirth           String? // Consider using DateTime type if storing date
  ssn                   String?
  state                 String?
  banks                 Banks[]
  dwollaCustomers       DwollaCustomer[]
  dwollaFundingSources  DwollaFundingSource[]
}

model Banks {
  accountId        String @id @default(cuid()) @map("_id")
  bankId           String @unique
  accessToken      String
  shareableId      String
  userId           String
  fundingSourceUrl String
  user             User   @relation(fields: [userId], references: [id])
}

model DwollaCustomer {
  id               String   @id @default(cuid()) @map("_id")
  userId           String
  dwollaCustomerId String   @unique
  firstName        String
  lastName         String
  email            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User                  @relation(fields: [userId], references: [id])
  fundingSources DwollaFundingSource[]
}

model DwollaFundingSource {
  id                    String   @id @default(cuid()) @map("_id")
  userId                String
  dwollaCustomerId      String
  fundingSourceLocation String   @unique
  bankName              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id])
  dwollaCustomer DwollaCustomer @relation(fields: [dwollaCustomerId], references: [dwollaCustomerId])
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id]) // Update relation syntax
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Transaction {
  id             String    @id @default(cuid()) @map("_id")
  name           String
  amount         String
  channel        String
  category       String
  senderId       String
  receiverId     String
  senderBankId   String
  receiverBankId String
  date           DateTime? @default(now())
  email          String
}
